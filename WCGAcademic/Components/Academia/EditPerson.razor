@page "/academia/editperson"
@page "/academia/editperson/{id:int}"
@using WCGAcademic.InMemoryData
@rendermode InteractiveServer
@inject IPersonService personService;

@if (Id == null)
{
    <h3>Create a new Person</h3>
}
else
{
    <h3> Edit @person.Email</h3>
}

<EditForm Model="person" OnSubmit="HandleSubmit" FormName="create">
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="person.Email" class="form-control"></InputText>
    </div>
    <div>
        <label for="role">Role</label>
        <InputText id="role" @bind-Value="person.Role" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if(Id != null)
    {
    <button type="button" class="btn btn-danger" @onclick="DeletePerson"> Delete Person</button>
    }


</EditForm>


@code {

    [Parameter]
    public int? Id { get; set; }

    Person person = new Person();
    public string btnText = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            person = await personService.GetSinglePerson((int)Id);
        }
    }

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save new person" : "Update person";
    }


    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await personService.CreatePerson(person);
        }
        else
        {
            await personService.UpdatePerson(person, (int)Id);
        }
    }
    async Task DeletePerson()
    {
        await personService.DeletePerson(person.Id);
    }

}
