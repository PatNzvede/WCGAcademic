@page "/academia/editlecturer"
@page "/academia/editlecturer/{id:int}"
@using WCGAcademic.InMemoryData
@rendermode InteractiveServer
@inject ILecturerService lecturerService
@inject NavigationManager navigationManager

@if (Id == null)
{
    <h3>Create a new Lecturer</h3>
}
else
{
    <h3> Edit @lecturer.PersonId</h3>
}

<EditForm Model="lecturer" OnSubmit="HandleSubmit" FormName="create">
    <div>
        <label for="coursecode">CourseCode</label>
        <InputText id="coursecode" @bind-Value="lecturer.CourseCode" class="form-control"></InputText>
    </div>
    <div>
        <label for="personid">PersonId</label>
        <InputNumber id="personid" @bind-Value="lecturer.PersonId" class="form-control"></InputNumber>
    </div>
  
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteStudent"> Delete Student</button>
    }


</EditForm>


@code {

    [Parameter]
    public int? Id { get; set; }

    Lecturer lecturer = new Lecturer();
    public string btnText = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        @if (Id != null)
        {
            lecturer = await lecturerService.GetSingleLecturer((int)Id);
            navigationManager.NavigateTo("/academia/lecturers");
            
        }
    }

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save new lecturer" : "Update lecturer";
    }


    async Task HandleSubmit()
    {
        @if (Id == null)
        {
            await lecturerService.CreateLecturer(lecturer);
            navigationManager.NavigateTo("/academia/lecturers");
        }
        else
        {
            await lecturerService.UpdateLecturer(lecturer, (int)Id);
            navigationManager.NavigateTo("/academia/lecturers");
        }
    }
    async Task DeleteStudent()
    {
        await lecturerService.DeleteLecturer(lecturer.Id);
        navigationManager.NavigateTo("/academia/lecturers");
    }

}
