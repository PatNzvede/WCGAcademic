@page "/academia/registers"
@using System.Security.Claims
@using WCGAcademic.InMemoryData
@rendermode InteractiveServer
@inject ICourseRegisterService courseServiceRegister
@inject IPersonService personService
@inject NavigationManager navigationManager
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2>Course Register</h2>

<p> Click <b>Add register</b> on the side bar to register a course.</p>



<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>StudentName</th>
            <th>PersonId</th>
            @*   <th>PersonCode</th> *@
            <th>CourseCode</th>
            <th>Status</th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var register in courseRegisters)
        {
            <tr>
                <td>@register.Id</td>
                <td>@register.StudentName</td>
                <td>@register.PersonId</td>
                @*  <td>@register.PersonCode</td> *@
                <td>@register.CourseCode</td>
                <td>@register.Status</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowCourseRegister(register.Id))">
                        Edit
                        @* <i class="oi oi-pencil"></i> *@
                    </button>
                </td>

              <td></td>
            </tr>

        }
    </tbody>
</table>
@* <button class="btn btn-primary" @onclick="CreateNewCourseRegister">Create</button> *@


@code {
    private ClaimsPrincipal? currentUser;
    protected Person memuser;
    List<CourseRegister> courseRegisters = new List<CourseRegister>();

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        currentUser = authenticationState.User;

        string? username = currentUser?.Identity?.Name;
        bool isAuthenticated = currentUser?.Identity?.IsAuthenticated ?? false;
        var claims = currentUser?.Claims;
        var userid = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        memuser = await personService.GetGuidPerson(userid);
        if (memuser != null)
        {
            if (memuser.Role == "Student")
            {
                courseRegisters = await courseServiceRegister.GetRegisterByCodeByUserId(memuser.Id);
            }
            else
            {
                courseRegisters = await courseServiceRegister.GetAllRegisterByCodeByUserId();
            }
        }
        else
        {
            courseRegisters = await courseServiceRegister.GetAllRegisterByCodeByUserId();
        }

    }

    void ShowCourseRegister(int id)
    {
        if (memuser.Role == "Student")
        {
            navigationManager.NavigateTo($"/academia/editstudentregister/{id}");
        }
        else
            navigationManager.NavigateTo($"/academia/editlecturerregister/{id}");
    }
    void CreateNewCourseRegister()
    {
        navigationManager.NavigateTo($"/academia/editstudentregister");
    }
    async Task CheckRecords(string code)
    {
        await courseServiceRegister.GetCourseRegisterByCode(code);
    }


    async Task StudentRecords(int code)
    {
        await courseServiceRegister.GetStudentRegisterByCode(code);
    }


}
