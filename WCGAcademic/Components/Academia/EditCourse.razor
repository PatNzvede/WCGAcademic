@page "/academia/editcourse"
@page "/academia/editcourse/{id:int}"

@rendermode InteractiveServer
@using WCGAcademic.InMemoryData
@inject NavigationManager navigationManager
@inject ICourseService courseService;

@if (Id == null)
{
    <h3>Create a new Course</h3>
}
else
{
    <h3> Edit @course.Name</h3>
}

<EditForm Model="course" OnSubmit="HandleSubmit" FormName="create">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="course.Name" class="form-control"></InputText>
    </div>
      <div>
        <label for="coursecode">CourseCode</label>
        <InputText id="coursecode" @bind-Value="course.CourseCode" class="form-control"></InputText>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if(Id != null)
    {
    <button type="button" class="btn btn-danger" @onclick="DeleteCourse"> Delete Course</button>
    }
    

</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    Course course = new Course();
    public string btnText = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {

            course = await courseService.GetSingleCourse((int)Id);
        }
    }

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save new course" : "Update Course";
    } 


    async Task HandleSubmit()
    {
        if(Id== null)
        {
            await courseService.CreateCourse(course);
            navigationManager.NavigateTo("/academia/courses");

        }
        else
        {
            await courseService.UpdateCourse(course, (int)Id);
            navigationManager.NavigateTo("/academia/courses");
        }
    }
    async Task DeleteCourse()
    {
        await courseService.DeleteCourse(course.Id);
        navigationManager.NavigateTo("/academia/courses");

    }

}
