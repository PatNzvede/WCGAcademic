@page "/academia/addregister"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@using WCGAcademic.Data
@using WCGAcademic.InMemoryData
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager navigationManager
@inject ICourseRegisterService courseServiceRegister
@inject IPersonService personService
@inject ICourseService courseService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="courseRegister" OnValidSubmit="HandleSubmit" FormName="create">
   @*  <div>
        <label for="studentname">StudentName</label>
        <InputText id="studentname" @bind-Value="courseRegister.StudentName" class="form-control"></InputText>
    </div> *@
    @* <div>
        <label for="coursecode">CourseCode</label>
        <InputText id="coursecode" @bind-Value="courseRegister.CourseCode" class="form-control"></InputText>
    </div> *@

    <h3> We are registering here.</h3>
    <br/>
    <p>  You can choose any of the courses in the drop down list and request approval before you can enrol </p>

    <div>
        <select class="form-control" @bind="courseRegister.CourseCode">
            <option value="">-- Select Course --</option>
            <option value="Accounting">Accounting</option>
            <option value="Algebra">Algebra</option>
            <option value="Balancing">Balancing</option>
            <option value="Networking">Networking</option>
            <option value="Computing">Computing</option>
        </select>

    </div>

    @* <div>

        <label for="optionSelect">Select an option:</label>
        <InputSelect id="optionSelect" @bind-Value="myModel.SelectedOption">
            <option value="">-- Select --</option>
            @foreach (var option in Options)
            {
                <option value="@option">@option</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => myModel.SelectedOption)" />

    </div> *@


    <div>
        <select class="form-control" @bind="courseRegister.Status">
            <option value="">-- Select Status --</option>
            <option value="Request Approval">Request Approval</option>
            @* <option value="Enrolled">Enrolled</option> *@
            <option value="De-registered">De-registered</option>
        </select>

    </div>
    @* <div>
        <label for="personcode">PersonCode</label>
        <InputText id="personcode" @bind-Value="courseRegister.PersonCode" class="form-control"></InputText>
    </div> *@
    @* <div>
        <label for="personid">PersonId</label>
        <InputNumber id="personid" @bind-Value="courseRegister.PersonId" class="form-control"></InputNumber>
    </div> *@
    <br />
    <button type="submit" class="btn btn-primary">Create</button>

   </EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    // [CascadingParameter]
    // public int StudentId { get; set; }

    private MyModel myModel = new MyModel();

    public class MyModel
    {
        [Required(ErrorMessage = "Please select an option.")]
        public string SelectedOption { get; set; }
    }

    CourseRegister courseRegister = new CourseRegister();
    public string btnText = string.Empty;

    private List<string> Options = new List<string> { "Option A", "Option B", "Option C" };


    List<Course> courses = new List<Course>();
    Person person = new Person();
    private ClaimsPrincipal? currentUser;
    
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        currentUser = authenticationState.User;

        string? username = currentUser?.Identity?.Name;
        bool isAuthenticated = currentUser?.Identity?.IsAuthenticated ?? false;
        var claims = currentUser?.Claims;
        var userid = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        memuser = await personService.GetGuidPerson(userid);

      //  btnText = Id == null ? "Save new course register" : "Update Course Register";
    }

    protected Person memuser;

    async Task HandleSubmit()
    {
        //i need user manager here

        //var loggeduser = await UserManager.FindByEmailAsync("");


        @if (memuser != null)
        {
            courseRegister.PersonId = memuser.Id;
            courseRegister.StudentName = memuser.Email;
            courseRegister.UserId = memuser.IdentityId;
            await courseServiceRegister.CreateCourseRegister(courseRegister);
            navigationManager.NavigateTo("/academia/registers");
        }
        else
        {
            courseRegister.PersonId = memuser.Id;
            await courseServiceRegister.UpdateCourseRegister(courseRegister, (int)Id);
            navigationManager.NavigateTo($"/academia/registers");
        }
    }
    async Task DeleteCourse()
    {
        await courseServiceRegister.DeleteCourseRegister(courseRegister.Id);
        navigationManager.NavigateTo("/academia/registers");
    }

    private sealed class InputModel
    {
        [Required]
        public string? Status { get; set; }
        [Required]
        public string? CourseCode { get; set; }
    }

}



